import Vue from 'vue';
import firebase from 'firebase';

let defaultUserData = {
    balance: 0, // userBalance
    apiToken: null, // api auth data
    methods: [] // sms data
};

export default {
    state: {
        userData: defaultUserData,
        orders: []
    },
    mutations: {
        SET_USER_DATA(state, payload) {
            Vue.set(state, 'userData', payload)
        },
        UNSET_USER_DATA(state) {
            state.userData = defaultUserData
        },
        SET_ORDERS(state, payload) {
            state.orders = payload
        },
    },
    actions: {
        // load data
        LOAD_USER_DATA({ commit, getters }) {
            commit('SET_PROCESSING', true)
            var userDataRef = firebase.database().ref('userData/' + getters.userId);
            try {
                userDataRef.on('value', (snapshot) => {
                    const data = snapshot.val();
                    let userData = defaultUserData
                    if (data) {
                        userData = data;
                    }
                    commit('SET_USER_DATA', userData)
                    commit('SET_PROCESSING', false)
                })
            } catch (error) {
                commit('SET_PROCESSING', false)
                commit('SET_ERROR', error)
                throw error
            }
        },
        // add api data
        ADD_USER_API_TOKEN({ commit, getters, dispatch }, payload) {
            commit('SET_PROCESSING', true)
            try {
                firebase.database().ref('userData/' + getters.userId + '/apiToken/' + payload.index).update({
                    name: payload.name,
                    key: payload.key,
                    status: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                    startDate: new Date(),
                }).then(() => {
                    if (getters.methods === undefined) {
                        dispatch("ADD_METHODS_DATA")
                    }
                })
            }
            catch (e) {
                commit('SET_ERROR', e);
                commit('SET_PROCESSING', false);
                throw e;
            }
        },
        // update api data by key
        UPDATE_USER_API_TOKEN({ commit, getters }, payload) {
            commit('SET_PROCESSING', true)
            try {
                firebase.database().ref('userData/' + getters.userId + '/apiToken/' + payload.index).update({
                    name: payload.item.name,
                    key: payload.item.key,
                    status: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                    startDate: new Date(),
                })
            }
            catch (e) {
                commit('SET_ERROR', e);
                commit('SET_PROCESSING', false);
                throw e;
            }
        },
        // delete api data by key
        DELETE_API_TOKEN({ commit, getters }, payload) {
            commit('SET_PROCESSING', true);
            if (payload != Object.keys(getters.apiToken).length) {
                let arr = getters.apiToken;
                arr.splice(payload, 1)
                firebase.database().ref('userData/' + getters.userId + '/apiToken').remove()
                firebase.database().ref('userData/' + getters.userId + '/apiToken').set(arr)
            }
            else {
                try {
                    firebase.database().ref('userData/' + getters.userId + '/apiToken/' + payload).remove()
                }
                catch (e) {
                    commit('SET_ERROR', e);
                    commit('SET_PROCESSING', false);
                    throw e;
                }
            }
        },
        // add sms data after auth
        ADD_METHODS_DATA({ commit, getters }) {
            commit('SET_PROCESSING', true)
            try {
                firebase.database().ref('userData/' + getters.userId).update({
                    methods: [
                        {
                            message: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {–ò–ú–Ø}! –ú—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ {–°–°–´–õ–ö–ê} –±—Ä–µ–Ω–¥–∞ {–ë–†–ï–ù–î}  –∞—Ä—Ç–∏–∫—É–ª {–ê–†–¢–ò–ö–£–õ –¢–û–í–ê–†–ê} –Ω–∞ —Å–∞–π—Ç–µ Wildberries, –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –û—Ç –∫–æ–º–∞–Ω–¥—ã {–ë–†–ï–ù–î} –æ–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ üòä. –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.",
                            name: "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                            start: true
                        }, {
                            message: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –Ω–µ–¥–∞–≤–Ω–∏–π –∑–∞–∫–∞–∑ –Ω–∞ Wildberries. –Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –∏–∑–¥–µ–ª–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!  –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –∏ –¥–∞–ª–µ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è",
                            name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–º —Å –ü–í–ó",
                            start: false
                        }, {
                            message: "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç Wildberries –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏  –ø–æ –∞–¥—Ä–µ—Å—É {–ê–î–†–ï–° –ü–í–ó}, —É –≤–∞—Å –µ—Å—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.",
                            name: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å –ü–í–ó",
                            start: false
                        }, {
                            message: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞). –ù–∞–º –∂–∞–ª—å, —á—Ç–æ (–°–°–´–õ–ö–ê) –Ω–µ –ø–æ–¥–æ—à–µ–ª –≤–∞–º. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (2-3 —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞). –ñ–¥–µ–º –≤–∞—Å!",
                            name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–º",
                            start: false
                        }, {
                            message: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞). –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞) –Ω–∞ —Å–∞–π—Ç–µ Wildberries! üòä –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞. –í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –º—ã –≤—ã—à–ª–µ–º –≤–∞–º (—á–µ–∫-–ª–∏—Å—Ç, –¢–û–ü-5 –∏ —Ç.–¥.).",
                            name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ c –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
                            status: true
                        }, {
                            message: "–£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å —É–¥–æ–±–Ω—ã–µ, –ª–µ–≥–∫–∏–µ –∂–µ–Ω—Å–∫–∏–µ —à–ª–µ–ø–∞–Ω—Ü—ã MG! –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ! –í –Ω–∞–ª–∏—á–∏–∏ –±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–æ–¥–µ–ª–µ–π –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫ –¥–æ –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–æ–¥–∞–∂.",
                            name: "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
                            start: false
                        }
                    ]
                })
            }
            catch (e) {
                commit('SET_ERROR', e);
                commit('SET_PROCESSING', false);
                throw e;
            }
        },
        // load orders from db
        LOAD_ORDERS({ commit, getters }) {
            Vue.$cdb.collection(`wbData/${getters.userId}/orders`)
                .get()
                .then(querySnapshot => {
                    let orders = []
                    querySnapshot.forEach(s => {
                        const data = s.data()
                        let order = {
                            dateCreated: data.dateCreated,
                            orderId: data.orderId,
                            fio: data.fio,
                            phone: data.phone,
                            status: data.status,
                            userStatus: data.userStatus,
                            tableStatus: "",
                            sms_status: data.sms_status,
                            sms_price: data.price
                        }

                        orders.push(order)

                        // status for table

                        orders.forEach((order) => {
                            if (order.status == 0) {
                                order.tableStatus = "–ù–æ–≤—ã–π";
                            }
                            if (order.status == 8) {
                                order.tableStatus = "–ù–∞ —Å–±–æ—Ä–∫–µ";
                            }
                            if (order.status == 3) {
                                order.tableStatus = "–û—Ç–∫–ª–æ–Ω–µ–Ω";
                            }
                            if (order.userStatus == 3) {
                                order.tableStatus = "–û—Ç–º–µ–Ω–µ–Ω";
                            }
                            if (order.userStatus == 1) {
                                order.tableStatus = "–û—Ç–º–µ–Ω–µ–Ω";
                            }
                            if (order.userStatus == 5) {
                                order.tableStatus = "–û—Ç–º–µ–Ω–µ–Ω";
                            }
                            if (order.userStatus == 1 && status == 1) {
                                order.tableStatus = "–û—Ç–º–µ–Ω–µ–Ω";
                            }
                            if (order.status == 1) {
                                order.tableStatus = "–ù–∞ —Å–±–æ—Ä–∫–µ";
                            }
                            if (order.userStatus == 2) {
                                order.tableStatus = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω";
                            }
                            if (order.status == 6) {
                                order.tableStatus = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω";
                            }
                            if (order.status == 2 && 5 && 9 && order.userStatus == 4) {
                                order.tableStatus = "–ù–∞ –¥–æ—Å—Ç–∞–≤–∫–µ";
                            }
                        })
                    })
                    commit('SET_ORDERS', orders)
                    console.log(orders);
                })
                .catch(error => {
                    commit('SET_ERROR', error)
                    throw error
                })
        },
    },
    getters: {
        balance: (s) => s.userData.balance,
        apiToken: (s) => s.userData.apiToken,
        methods: (s) => s.userData.methods,
        orders: (s) => s.orders,
    }
}